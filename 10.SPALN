### download relevant genomes from NCBI genomes using Eupercaria filter
### create searchable genomes in .gz
### Run SPALN: format genome  and search them for proteins and return binary grd file and protein sequences for tilapia homologs

# use M option to return more than 1 output
for G in *mfa.gz
	do
	genome=$(echo $G | cut -f 1  -d ".")
	makeidx.pl -ipn $G
	spaln -t2 -Q7 -O12 -LS -yS -TFish_mdl -o $genome -d$genome tilapia.PROTEINS.fasta
	spaln -t2 -Q7 -O7 -LS -yS -TFish_mdl -o ${genome}_aa -d$genome tilapia.PROTEINS.fasta	


###### format output
### extract protein ID
awk -F"|" '{print $3}' tilapia.PROTEINS.fasta | sed '/^$/d' >tilapia.PROTEINS_ID.fasta
awk '{print $1}' tilapia.PROTEINS_ID.fasta >ID

##format output from spaln to only include homology ID
for G in *_aa
	do
	sed '/^;/ d' $G | awk -F" " '{print $10}' | sed '/^$/d' | awk '{print ">"$0}' > ${G}_ID 
	
	done

## replace fasta header with homology ID
for G in *_aa
	do
	perl rename.pl ${G}_ID ${G}_AA > ${G}_final
	done

### filter output for binary grd file and keep homology ID
### 60 percent identity and 90% coverage

for G in *grd
	do
	sortgrcd -C95 $G | awk -F" " '{if ($17>60) print $0}' | awk -F" " '{print $8}' > ${G}_filtered	
	done

### extract QC proteins from all proteins
for G in *mfa.gz
	do
	genome=$(echo $G | cut -f 1  -d ".")
 	pyfasta extract --fasta ${genome}_aa_final --file ${genome}.grd_filtered --header >${genome}_aa_QC
 	done


### intersect ID from all species
grep -Fx -f  Anoplopoma_fimbria.grd_filtered Cottus_rhenanus.grd_filtered >1
grep -Fx -f 1 Dicentrarchus_labrax.grd_filtered > 2
grep -Fx -f 2 Gasterosteus_aculeatus.grd_filtered > 3
grep -Fx -f 3 Labrus_bergylta.grd_filtered > 4
grep -Fx -f 4 Larimichthys_crocea.grd_filtered > 5
grep -Fx -f 5 Miichthys_miiuy.grd_filtered > 6
grep -Fx -f 6 Mola_mola.grd_filtered > 7
grep -Fx -f 7 Morone_saxatilis.grd_filtered > 8
grep -Fx -f 8 Notothenia_coriiceps.grd_filtered > 9
grep -Fx -f 9 Sebastes_nigrocinctus.grd_filtered > 10
grep -Fx -f 10 Sebastes_rubrivinctus.grd_filtered > 11
grep -Fx -f 11 symphodus_melops.grd_filtered > 12
grep -Fx -f 12 Takifugu_flavidus.grd_filtered > 13
grep -Fx -f 13 Takifugu_rubripes.grd_filtered > 14
grep -Fx -f 14 Tetraodon_nigroviridis.grd_filtered > 15
grep -Fx -f 15 Branchiostoma_floridae.grd_filtered > 16
grep -Fx -f 16 Danio_rerio.grd_filtered > 17
grep -Fx -f 17 Gadus_morhua.grd_filtered > 18
grep -Fx -f 18 Oreochromis_niloticus.grd_filtered > COMMON


### the file COMMON now conatins the intersect between all id's
## extract common proteins in all species
for G in *aa_QC
	do
	pyfasta extract --fasta $G --file COMMON --header >${G}.common	
	done


## replace organism ID in fasta file
for G in *mfa.gz
	do
	genome=$(echo $G | cut -f 1  -d ".")
	sed 's/ORENI/'"${genome}"'/g' ${genome}_aa_QC.common > ${genome}_proteins
 	done


# now *_proteins contains all homologs found in all species
# TODO split the species specific proteins and create 1 fasta file pr- homolog

sed 's/ORENI//g' COMMON >COMMON_ID
scp COMMON_ID test/
mkdir test
scp *_proteins test/
cd test
for G in *_proteins
	do
	perl splitFasta.pl $G
	done
	

## now loop through all individuals files and cat homologs onto one file pr. homolog
while read ID; do
  cat $ID* > ${ID}ALL.fa
done <COMMON_ID


# now perform the aligmnet producing msa fasta
for G in *ALL.fa
	do
	muscle -in $G -out ${G}.msa.fa
	done

# trim aligments
for G in *msa.fa
	do
	~/software/trimal/source/trimal -in $G -fasta -automated1 -out $G.trimal.fasta
	done
	
## remove unique identifiers
for G in *trimal.fasta
	do
	sed 's/[a-zA-Z0-9]\{2,6\}_//' $G > $G.rdy
	done

scp *rdy MSA/

python test3.py MSA/ >BIG

~/software/FastTree BIG




###########################################
### the following code used SPALN and HMM to sarch Pfam profiles


# do SPALN
for genome in *mfa.gz
        do
        spaln -M -t2 -Q7 -O4 -LS -yS -TFish_mdl -o${genome}_Pfam -d$genome tilapia.PROTEINS.fasta
        spaln -M -t2 -Q7 -O7 -LS -yS -TFish_mdl -o${genome}_Pfam_aa -d$genome tilapia.PROTEINS.fasta
done

# first extract SPALN hits with more than 80% sequence identify and use keep hit ID, query ID and score as fasta identifier
# prepare for HMMER sarch

for genome in *mfa.gz
        do

	### extract QC proteins, create ID and remove duplicates
	grep -w "@" ${genome}_Pfam | awk 'BEGIN { FS = " " } ; {if ($17>80) print $0}' | awk 'BEGIN { FS = " " } ; {print ">"$2"-"$8"-"$15"0"}' >file
	awk '/^>/ { if (id[$1]++ == 0) printing = 1; else printing = 0 } { if (printing) print }' file >file1
	sed 's/>//g' file1 >query

	# extract protein sequences and format ID
	grep "^>" ${genome}_Pfam_aa | awk 'BEGIN { FS = " " } ; {print ">"$2"-"$10"-"$19}' > file2
	perl rename.pl file2 ${genome}_Pfam_aa | sed '/^;/ d' >file3
	awk '/^>/ { if (id[$1]++ == 0) printing = 1; else printing = 0 } { if (printing) print }' file3 >db

	# extract fasta for HMM search
	./faSomeRecords db query ${genome}_Pfam_RDY

done


# perform PFam search in protein database
for genome in *gz_Pfam_RDY 
        do
	hmmsearch --cpu 3 -o ${genome}.hmmer.out --noali --tblout ${genome}.hmmer.table -E 1e-10 Pfam-A.hmm $genome
	done
	
	
#### make massive matrix

# first create index of names
grep -w "#=GF ID" Pfam-A.hmm.dat | awk '{print $3}' ID

# count using awk
awk '{count[$3]++} END {for (word in count) print word, count[word]}' Cottus_rhenanus.mfa.gz_Pfam_RDY.hmmer.table 

